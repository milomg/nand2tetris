class Dot {
  field Number x, y, velx, vely; // position and velocity
  field boolean pinned; // are we being held by the mouse?

  // w: max x value, 
  // h: max y value, 
  // m: min x and y value
  static Number w, h, m, groundFriction, friction, gravity;
  static int radius;
  function void initialize() {
    var Number tmp;

    let radius = 5;
    let gravity = Number.new(1); // Gravity is just 1 pixel/second^2
    let w = Number.new(511 - radius); // I initialize a bunch of constants that I copy in when I need them
    let h = Number.new(127 - radius); // This is where I set the ground height (127 instead of 255)
    let m = Number.new(radius); // The minimum x and y values is just the radius
    
    let groundFriction = Number.new(7);
    let tmp = Number.new(10);
    do groundFriction.do_div(tmp); // Set ground friction to 7/10

    let friction = Number.new(8);
    let tmp = Number.new(10);
    do friction.do_div(tmp); // Set regular friction to be .8 (this is not simplified for faster editing)

    return;
  }
  constructor Dot new(int _x, int _y) {
    let x = Number.new(_x);
    let y = Number.new(_y);
    let velx = Number.new(0);
    let vely = Number.new(0);
    return this;
  }

  method boolean getPinned() {
    return pinned;
  }
  method void setPinned(boolean _pinned) {
    let pinned = _pinned;
    return;
  }

  // We don't need setters because you can manipulate the returned value directly.
  method Number getX() {
    return x;
  }
  method Number getY() {
    return y;
  }
  method Number getVelY() {
    return vely;
  }
  method Number getVelX() {
    return velx;
  }

  method void update() {
    do vely.do_add(gravity);
    if (~pinned) {
      do x.do_add(velx); // Move the dots (when they aren't held by the mouse)
      do y.do_add(vely);
    }
    do velx.do_mul(friction); // Every timestep we slow down the dots to prevent things from blowing up
    do vely.do_mul(friction);

    if (x.cmp(w) > 0) {
      do x.set_from_other(w);
    }
    if (y.cmp(h) > 0) {
      do y.set_from_other(h);
      do velx.do_mul(groundFriction);
      do vely.do_mul(groundFriction);
    }
    if (x.cmp(m) < 0) {
      do x.set_from_other(m);
    }
    if (y.cmp(m) < 0) {
      do y.set_from_other(m);
    }

    return;
  }

  method void draw() {
    do Screen.drawCircle(x.get_int(), y.get_int(), radius);
    return;
  }
}
