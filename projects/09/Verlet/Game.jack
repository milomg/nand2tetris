class Game {
  field int mx, my; // mouseX, mouseY
  field boolean holding; // is mouse down (space to toggle)
  field Dot currentNode; // selected node
  field Array dots;
  field Array edges;
  field int dotsLength, edgesLength;
  field boolean paused;

  static Number five;

  method void main() {
    do Screen.clearScreen();

    do drawGround();
    do drawMouse();
    
    do drawDotsEdges();

    do update();
    do updateKeys();
    
    return;
  }

  method void drawGround() {
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 127, 511, 255);
    return;
  }

  method void drawDotsEdges() {
    var int i;
    var Dot d;
    var Edge e;

    do Screen.setColor(true);
    let i = 0;
    while (i < dotsLength) {
      let d = dots[i];
      do d.draw();
      let i = i + 1;
    }

    let i = 0;
    while (i < edgesLength) {
      let e = edges[i];
      do e.draw();
      let i = i + 1;
    }

    return;
  }

  method void update() {
    var int i;
    var Dot d;
    var Edge e;

    // Loop through all nodes and call update.
    let i = 0;
    while (i < dotsLength) {
      let d = dots[i];
      do d.update();
      let i = i + 1;
    }


    // Loop through all edges and call update.
    let i = 0;
    while (i < edgesLength) {
      let e = edges[i];
      do e.update();
      let i = i + 1;
    }

    return;
  }

  method void updateKeys() {
    var char key;
    var int i, x, y, dist;
    var Number tmp;
    var Dot d;

    let key = Keyboard.keyPressed();

    // Move the mouse based on the current key
    if (key = 130) { let mx = mx - 5; }
    if (key = 132) { let mx = mx + 5; }
    if (key = 131) { let my = my - 5; }
    if (key = 133) { let my = my + 5; }

    // Constrain the mouse to the screen
    if (mx < 7) { let mx = 7; }
    if (mx > (511 - 7)) { let mx = (511 - 7); }
    if (my < 7) { let my = 7; }
    if (my > (255 - 7)) { let my = (255 - 7); }

    if (~(currentNode = 0)) {
      // Set the current node to the mouse position.
      let tmp = currentNode.getX();
      do tmp.set_from_int(mx);
      let tmp = currentNode.getY();
      do tmp.set_from_int(my);

      // If we're moving the mouse, we also want to give the currentNode velocity.
      // This allows you to fling a node when you release it.
      if (key = 130) { let tmp = currentNode.getVelX(); do tmp.do_sub(five); }
      if (key = 132) { let tmp = currentNode.getVelX(); do tmp.do_add(five); }
      if (key = 131) { let tmp = currentNode.getVelY(); do tmp.do_sub(five); }
      if (key = 133) { let tmp = currentNode.getVelY(); do tmp.do_add(five); }
    }

    if (key = 32) {
      do Output.printString("paused while holding space");
      while (~(key = 0)) { 
        let key = Keyboard.keyPressed();
      }
      do Output.moveCursor(0,0);
      let holding = ~holding;

      if (holding) {
        let i = 0;
        let currentNode = dots[i];
        let dist = 32767;
        while (i < dotsLength) {
          let d = dots[i];

          let tmp = d.getX();
          let x = tmp.get_int() - mx;
          let tmp = d.getY();
          let y = tmp.get_int() - my;
          let x = (x * x) + (y * y); // Agh, I had a bug with parentheses here.
          if (x < 0){
            let x = 32767;
          }

          if (x<dist) {
            let currentNode = d;
            let dist = x;
          }
          let i = i + 1;
        }

        // When we've selected a new node, move the mouse to the node so we know what we've selected.
        // (and so that the node doesn't jump miles away when it moves to the mouse)
        let tmp = currentNode.getX();
        let mx = tmp.get_int();
        let tmp = currentNode.getY();
        let my = tmp.get_int();
        do currentNode.setSelected(true);
      } else {
        do currentNode.setSelected(false);
        let currentNode = 0;
      }
    }

    return;
  }

  method void drawMouse() {
    do Screen.setColor(true);
    do Screen.drawCircle(mx, my, 7);
    do Screen.setColor(false);
    do Screen.drawCircle(mx, my, 6);
    return;
  }

  function void initialize() {
    let five = Number.new(5);
    return;
  }
  constructor Game new(){
    let mx = 100;
    let my = 55;
    let holding = false;
    let dots = Array.new(10); // preallocate space for more dots and edges
    let edges = Array.new(10);
    let dotsLength = 4;
    let edgesLength = 5;

    let dots[0] = Dot.new(50, 50);
    let dots[1] = Dot.new(121, 50);
    let dots[2] = Dot.new(50, 100);
    let dots[3] = Dot.new(100, 120);

    let edges[0] = Edge.new(dots[0], dots[1]);
    let edges[1] = Edge.new(dots[0], dots[2]);
    let edges[2] = Edge.new(dots[1], dots[2]);
    let edges[3] = Edge.new(dots[1], dots[3]);
    let edges[4] = Edge.new(dots[2], dots[3]);

    let paused = false;
    return this;
  }
}
