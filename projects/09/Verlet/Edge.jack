class Edge {
  field Dot start, end;
  field Number length;

  // I'm preallocating stuff up here because allocating in the inner loop feels slow?
  field Number dx, dy;
  field Number dist;
  field Number dy2, ld, tmp;

  static Number half;

  function void initialize() {
    var Number tmp;
    // let tmp = Number.new(50000);
    let half = Number.new(2);
    do half.do_mul(half);
    // do half.do_div(tmp);
    return;
  }
  constructor Edge new(Dot _start, Dot _end) {
    let start = _start;
    let end = _end;

    let dx = start.getX();
    let dx = dx.clone();
    do dx.do_sub(end.getX());
    do dx.do_mul(dx);

    let dy = start.getY();
    let dy = dy.clone();
    do dy.do_sub(end.getY());
    do dy.do_mul(dy);

    let length = dx.clone();
    do length.do_add(dy);
    // do length.do_sqrt();

    let dist = length.clone();
    let dy2 = dy.clone();
    let ld = length.clone();

    return this;
  }

  method void update() {
    do dx.set_from_other(end.getX());
    do dx.do_sub(start.getX()); // dx = end.x - start.x

    do dy.set_from_other(end.getY());
    do dy.do_sub(start.getY()); // dy = end.y - start.y

    do dy2.set_from_other(dy);
    do dy2.do_mul(dy); // dy2 = dy * dy

    do dist.set_from_other(dx);
    do dist.do_mul(dx); // dist = dx * dx
    do dist.do_add(dy2); // dist = dx * dx + dy * dy

    // We can avoid the sqrt because nobody can tell the difference in accuracy
    // do dist.do_sqrt(); // dist (current length) = hypot(end.x - start.x, end.y - start.y)
    
    // Effectively this is setting ld = (original length - dist) / dist / 2;
    do ld.set_from_other(length);
    do ld.do_sub(dist);
    do ld.do_div(dist);
    do ld.do_div(half);  // ld here is change in original length as a fraction of dist

    do dx.do_mul(ld);
    do dy.do_mul(ld);

    if (~start.getSelected()){
      let tmp = start.getVelX();
      do tmp.do_sub(dx);
      let tmp = start.getVelY();
      do tmp.do_sub(dy);
    }
    if (~end.getSelected()){
      let tmp = end.getVelX();
      do tmp.do_add(dx);
      let tmp = end.getVelY();
      do tmp.do_add(dy);
    }

    return;
  }
  
  // Draw a line from start to end
  method void draw() {
    var Number x,y,x2,y2;
    let x = start.getX();
    let y = start.getY();
    let x2 = end.getX();
    let y2 = end.getY();
    do Screen.drawLine(
      x.get_int(),
      y.get_int(),
      x2.get_int(),
      y2.get_int()
    );
    return;
  }
}
