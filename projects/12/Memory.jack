// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int free;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free = 2048;
        let ram[free] = 14336;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;        
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int lasti, i, out;

        let lasti = 0;
        let i = free;
        if (size < 0) {
            do Sys.error(5);
            return 0;
        } else {
            if (size = 0) {
                let size = 1;
            }
        }

        // Find the first free segment that has at least the right size
        // (but make sure not to run out of memory)
        while ((ram[i] < (size + 1)) & ~(ram[i + 1] = 0)) {
            let lasti = i;
            let i = ram[i + 1];
        }

        // If the ram segment is too large, split it up
        if (ram[i] > (size + 1)) {
            let out = i + ram[i] - (size);
            let ram[out - 1] = (size + 1);
            let ram[i] = ram[i] - (size + 1);
            return out;
        } else {
            // If the ram segment is exactly the right size, use it (and adjust the list accordingly)
            if (lasti > 0) {
                let ram[lasti + 1] = ram[i + 1];
                return i + 1;
            } else { // If it is the first segment
                let free = ram[i + 1];
                return i + 1;
            }
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = free;
        let free = o - 1;
        return;
    }
}
