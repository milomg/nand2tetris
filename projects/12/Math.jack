// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array table;

    /** Initializes the library. */
    function void init() {
        let table = Array.new(16);
        let table[0] = 1;
        let table[1] = 2;
        let table[2] = 4;
        let table[3] = 8;
        let table[4] = 16;
        let table[5] = 32;
        let table[6] = 64;
        let table[7] = 128;
        let table[8] = 256;
        let table[9] = 512;
        let table[10] = 1024;
        let table[11] = 2048;
        let table[12] = 4096;
        let table[13] = 8192;
        let table[14] = 16384;
        let table[15] = 16384 + 16384;
        return;
    }

    function int pow2(int x) {
        return table[x];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
     function int multiply(int x, int y) {
        var int out;
        let out = Math.posmul(Math.abs(x), Math.abs(y));
        if ((x < 0) = (y < 0)) {
            return out;
        }
        else {
            return -out;
        }
    }
    
    function int posmul(int x, int y) {
        var int sum, shiftedX, j;
        let sum = 0;
        let shiftedX = x;
        while (j < 16) {
            if (~((y & table[j]) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, sum, negx, negy, out;
            
        let negy = y < 0;
        let negx = x < 0;        
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if ((x - ((q + q) * y)) < y) {
            let out = q + q;
        } else {
            let out = q + q + 1;
        }

        if (negx = negy) {
            return out;
        } else {
            return -out;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int ytmp, ytmp_squared;
        let y = 0;
        let j = 7; // 16/2 - 1
        while (~(j  < 0)) {
            let ytmp = y + table[j];
            let ytmp_squared = ytmp * ytmp;
            if (~(ytmp_squared > x) & (ytmp > 0)) {
                let y = y + table[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
