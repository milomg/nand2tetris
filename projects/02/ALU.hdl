// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // Zero and negate x based on zx and nx inputs -> output to outx
        Mux16(a=x, sel=zx, out=outx1);
        Not16(in=outx1, out=outx2);
        Mux16(a=outx1, b=outx2, sel=nx, out=outx);

        // Zero and negate y based on zy and ny inputs -> output to outy
        Mux16(a=y, sel=zy, out=outy1);
        Not16(in=outy1, out=outy2);
        Mux16(a=outy1, b=outy2, sel=ny, out=outy);


        // Apply both possibilities for f, and select based on the input f bit -> output to outf
        And16(a=outx, b=outy, out=outxpy);
        Add16(a=outx, b=outy, out=outxay);
        Mux16(a=outxpy, b=outxay, sel=f, out=outf);

        // Negate the output if needed, send output to output, two 8 bit gates, and the sign bit to ng
        Not16(in=outf, out=outnf);
        Mux16(a=outf, b=outnf, sel=no, out=out, out[15]=ng, out[0..7]=o8, out[8..15]=o16);
        
        // Check the two 8 bit gates to see if anything in the output is 0
        Or8Way(in=o8, out=out1);
        Or8Way(in=o16, out=out2);
        Or(a=out1,b=out2,out=nzr);
        Not(in=nzr,out=zr);
}